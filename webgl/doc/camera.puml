@startuml

'----------------------------------------------------------------------------

abstract class Engine  #009dff {
  Renderer get renderer;
  Interaction get interaction;

  void render({num time: 0.0})
}

abstract class Renderer{
  void render();
}

Engine *-- Renderer
Engine *-- Interaction






'----------------------------------------------------------------------------

class GLTFEngine extends Engine{
    @override
    final CanvasElement canvas;

    @override
    final GLTFRenderer renderer;
}

GLTFEngine *-- GLTFRenderer
GLTFEngine *-- CanvasElement

class GLTFRenderer extends Renderer






'----------------------------------------------------------------------------

abstract class Interactionable #009dff{
  void onMouseDown(int screenX, int screenY);
  void onMouseMove(double deltaX, double deltaY, bool isMiddleMouseButton);
  void onMouseUp(int screenX, int screenY);
  void onMouseWheel(num deltaY);

  void onTouchStart(int screenX, int screenY);
  void onTouchMove(double deltaX, double deltaY, {num scaleChange});
  void onTouchEnd(int screenX, int screenY);
}

class Interaction {
    CanvasElement canvas
    TouchesManager touchesManager;
    List<Interactionable> interactionable
}
Interaction *-- TouchesManager
Interaction *-- CanvasElement
Interaction "* - 0" *--  Interactionable

class TouchesManager



'----------------------------------------------------------------------------

abstract class Camera #009dff{
    CameraController cameraController
}
Camera *-- CameraController

class CameraPerspective extends Camera
class CameraOrthographic extends Camera

abstract class CameraController #009dff{
  CameraControllerInteraction get cameraControllerInteraction;
  Camera get camera;
  void init(Camera camera);
}
CameraController *-- CameraControllerInteraction
CameraController *-- Camera

abstract class CameraControllerInteraction #009dff implements Interactionable {
  CameraController get cameraController;
}

class BaseCameraController extends CameraController{
    CameraControllerMode cameraControllerMode
}

BaseCameraController *-- CameraControllerMode

class BaseCameraControllerInteraction implements CameraControllerInteraction{
  final BaseCameraController cameraController;
}
BaseCameraControllerInteraction *-- BaseCameraController

enum CameraControllerMode{
  pan,
  orbit,
  rotate
}

'----------------------------------------------------------------------------










@enduml