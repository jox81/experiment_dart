297 constants
88 parametres
145 methodes


bounds:
getParameter : ARRAY_BUFFER_BINDING
getParameter : ELEMENT_ARRAY_BUFFER_BINDING
getParameter : FRAMEBUFFER_BINDING
getParameter : RENDERBUFFER_BINDING
getParameter : TEXTURE_BINDING_2D
getParameter : TEXTURE_BINDING_CUBE_MAP
getParameter : VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
CURRENT_PROGRAM


// activeTexture
// webGLTexture

https://www.khronos.org/registry/webgl/specs/latest/1.0/

// Suggestions /////////////////////

- clean scene before loading another
    /* ?? voir ici : http://stackoverflow.com/questions/9251837/how-to-remove-all-listeners-in-an-element
    var old_element = document.getElementById("btn");
    var new_element = old_element.cloneNode(true);
    old_element.parentNode.replaceChild(new_element, old_element);
    */
- sauvegarde d'une scene
    => skin
        -> json : static
        -> direct dart code
- affichage édition / visualisation
- affichage fps
- chargement d'un scene
- ui beauty
- ajouter un matériaux à un object
- bibliothèque des materiaux
- page settings globales
- shaders pbr +
- gerer les extensions
    -> ajouter des enums , methods etc, ...

- webglevents : https://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent

- créer des type webgl comme https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Types
    -> GLclampf [0.0 -> 1.0]

// Done /////////////////////

v- finir de placer toutes les méthodes webgl dans les objects //google doc
v- vérifier les constantes utilisées et indiquer leur provenance //google doc
v- splitter les méthodes getParameter en multiParameters
    + chaque objet webgl aussi
v- placer les enums dans un même fichier ?

v- reorganiser et refactoriser le code plus ergonomique
v- placer des méthodes static dans les object de réference : ie: placer bindFrameBuffer dans FrameBuffer plutot que dans context ?
v- ou placer certaine methode, en context ou en object specific ? bind dans le renderingcontext ou dans l'object ?
v- faut-il utiliser :
    (1) bool get depthTest => ctx.isEnabled(EnableCapabilityType.DEPTH_TEST.index);
    ou
    (2) bool get depthTest => isEnabled(EnableCapabilityType.DEPTH_TEST);

    (1): appel direct, plus rapide sans autre appel de fonction
    (2): possibilité d'agir entre les deux
    ==> préférer la (1) car plus directe